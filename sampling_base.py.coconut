#!/usr/bin/python
#
# base-002 (Coconut Island)
#
# Stanley Hou In Lio, stanleylio@gmail.com
# May 2016
import Adafruit_BBIO.UART as UART
import sys,serial,time,os,traceback,importlib
import logging,logging.handlers
from os import makedirs
from os.path import join,exists
from datetime import datetime,timedelta
from config.config_support import *
from storage.storage import storage
from parse_support import parse_message,pretty_print
from helper import *

from config import node
site = node.site
base = importlib.import_module(node.config)


# COMMUNICATION
UART.setup('UART1')
UART.setup('UART2')
UART.setup('UART3')
UART.setup('UART4')
serial_port = base.xbee_port
baud_rate = base.xbee_baud


# LOGGING
# https://docs.python.org/2/howto/logging-cookbook.html
log_dir = base.log_dir
if not exists(log_dir):
    makedirs(log_dir)
log_file = join(log_dir,'capture.log')
'''DEBUG,INFO,WARNING,ERROR,CRITICAL'''
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
sh = logging.StreamHandler()
sh.setFormatter(logging.Formatter('%(levelname)s %(message)s'))
logger.addHandler(sh)
fh = logging.handlers.RotatingFileHandler(log_file,maxBytes=1e7,backupCount=5)
fh.setFormatter(logging.Formatter('%(asctime)s %(message)s'))
logger.addHandler(fh)
logger.info(__name__ + ' starts')

# only base stations record ReceptionTime
s = get_schema(site)
for k,v in s.iteritems():
    v.insert(0,('ReceptionTime','TIMESTAMP'))
store = storage(schema=s)

with serial.Serial(base.xbee_port,base.xbee_baud,timeout=1) as s,\
     open(join(log_dir,'raw.txt'),'a+',0) as raw,\
     open(join(log_dir,'tsraw.txt'),'a+',0) as tsraw:

    s.flushInput()
    s.flushOutput()
    logger.info('begin capture')

    while True:
        try:
            line = s.readline()
            ts = datetime.utcnow()
            if len(line) > 0:
                raw.write(line)
                tsraw.write('{:6f}'.format(dt2ts(ts)) + '\t' + line.strip() + '\n')
                
                line = line.strip()
                # evil heristics - to get rid of the "DC3" "DC1" from the optodes
                if len(line) > 8:
                    d = parse_message(line)
                    if d is not None:
                        d['ReceptionTime'] = ts
                        pretty_print(d)
                        store.write(d['node'],d)
                    else:
                        logger.warning('Message from unrecognized source: ' + line)
        except KeyboardInterrupt:
            logger.info('user interrupted')
            break
        except serial.SerialException:
            logger.warning('USB-to-serial converters are EVIL')
            traceback.print_exc()
        except UnicodeDecodeError:
            logger.warning('UnicodeDecodeError: ' + line)
            traceback.print_exc()
        except Exception:
            logger.exception('Cannot process: ' + line)
            traceback.print_exc()

logger.info('terminated')


[base]
name=Base Station
baud=9600
;baud=115200
;port=/dev/ttyUSB0
port=/dev/ttyO1
;port=COM18
logdir=./log

; Two reminders to future self:
; 1. Mind the distinction between time of sampling (Timestamp) and time of
; reception (RecptionTime)
; 2. The variables being stored in the database are not always the ones
; captured from the sensors. One exampls is water pressure: the reading
; from the water pressure sensor is not compensated for atmospheric
; pressure. One may, for example, subtract the atmospheric pressure
; from the water pressure reading before storing it in the database.
; Another example would be unit conversion: sensor reports in mg/L but uM
; is preferred.

[node_001]
; name displayed on webpage
name=Triple Makaha (Aanderaa 3835)
; names of the columns in the database
dbtag=ReceptionTime,Oxygen,Saturation,Temperature
; the SQL data type of the variable/column
dbtype=TIMESTAMP UNIQUE,REAL,REAL,REAL
; units of the variables stored in the database; not directly used for presentation
dbunit=,uM,%,Deg.C

; names of the fields contained in the node message, used as dictionary keys internally
; for example, BBB communication protocol reports Timestamp and Checksum, but not ReceptionTime.
; hence dbtag has ReceptionTime but not Checksum, and msgfield vice versa.
msgfield=Oxygen,Saturation,Temperature
; Python conversion functions to convert a field in a message (a string) to its value (most likely a floating point number)
convf=float,float,float

;plotunit=,,uM,%,Deg.C
;some conversion function? like unit conversion, merge, etc?

[node_002]
name=Ocean Makaha 2 (Aanderaa 3835)
dbtag=ReceptionTime,Oxygen,Saturation,Temperature
dbtype=TIMESTAMP UNIQUE,REAL,REAL,REAL
dbunit=,uM,%,Deg.C
msgfield=Oxygen,Saturation,Temperature
convf=float,float,float

[node_003]
name=BBB Experimental (Aanderaa 4330F)
dbtag=ReceptionTime,Timestamp,O2Concentration_4330f,AirSaturation_4330f,Temperature_4330f,CalPhase_4330f,TCPhase_4330f,C1RPh_4330f,C2RPh_4330f,C1Amp_4330f,C2Amp_4330f,RawTemp_4330f
dbtype=TIMESTAMP UNIQUE,TIMESTAMP UNIQUE,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL
dbunit=,,uM,%,Deg.C,Deg,Deg,Deg,Deg,mV,mV,mV
msgfield=Timestamp,O2Concentration_4330f,AirSaturation_4330f,Temperature_4330f,CalPhase_4330f,TCPhase_4330f,C1RPh_4330f,C2RPh_4330f,C1Amp_4330f,C2Amp_4330f,RawTemp_4330f,Checksum
convf=lambda t: datetime.fromtimestamp(float(t)),float,float,float,float,float,float,float,float,float,float,str

[node_004]
; store raw data -> in mg/L. conversion to uM should be left for the presentation side
name=BBB Experimental
dbtag=ReceptionTime,Timestamp,EZO_EC,EZO_Sal,EZO_DO,EZO_pH,EZO_ORP,Pressure_BMP180,Temp_BMP180,Pressure_MS5803,Temp_MS5803,WindSpeed,UV_Si1145,IR_Si1145,Amb_Si1145,O2Concentration_4330f,AirSaturation_4330f,Temperature_4330f,CalPhase_4330f,TCPhase_4330f,C1RPh_4330f,C2RPh_4330f,C1Amp_4330f,C2Amp_4330f,RawTemp_4330f
dbtype=TIMESTAMP UNIQUE,TIMESTAMP UNIQUE,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL
dbunit=,,uS,,mg/L,,mV,Pa,Deg.C,kPa,Deg.C,m/s,,lux,lux,uM,%,Deg.C,Deg,Deg,Deg,Deg,mV,mV,mV
msgfield=Timestamp,EZO_EC,EZO_Sal,EZO_DO,EZO_pH,EZO_ORP,Pressure_BMP180,Temp_BMP180,Pressure_MS5803,Temp_MS5803,WindSpeed,UV_Si1145,IR_Si1145,Amb_Si1145,O2Concentration_4330f,AirSaturation_4330f,Temperature_4330f,CalPhase_4330f,TCPhase_4330f,C1RPh_4330f,C2RPh_4330f,C1Amp_4330f,C2Amp_4330f,RawTemp_4330f,Checksum
convf=lambda t: datetime.fromtimestamp(float(t)),float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,str
